=head0 Subs and Signatures

X<subroutine>
X<arguments>
X<signature>
X<return value>

A I<subroutine> is a piece of code that performs a specific task. It may
operate on provided data (I<arguments>) and may produce results (I<return
values>).  The I<signature> of a subroutine is a description of any arguments
it takes and any return values it produces.

The first chapter demonstrated simple subroutines.  In one sense, the operators
described in the second chapter are also subroutines that Perl 6 parses in
interesting ways.  However, they only scratch the surface of what's possible.

=head1 Declaring A Subroutine

X<subroutines; declaration>

A subroutine declaration consists of several parts.  First, the subroutine
declarator C<sub> indicates that you are starting a subroutine declaration.
Next comes an optional name and an optional signature.  The body of the sub
follows as a block of code enclosed in curly braces.  This is what will execute
every time the subroutine is called.

For example, in:

=begin programlisting

    sub panic() {
        say "Oh no! Something has gone most terribly wrong!";
    }

=end programlisting

... the name of the sub is C<panic>.  Its signature is empty.  Its body
consists of a single C<say> statement.

X<subroutines; scoping>
X<scoping; subroutines>

=for author

Link to exporting section.  Also, the description of scoping may be subtle
here.

=end for

By default, subroutines are lexically scoped, just like any variable declared
with C<my>. This means that a subroutine may only be called within the scope in
which it was declared.  Use the scope declarator C<our> to make the subroutine
available globally within the current package:

TODO: clarify "globally within the current package". It's confusing/ambiguous.

=begin programlisting

    {
        our sub eat() {
            say "om nom nom";
        }

        sub drink() {
            say "glug glug";
        }
    }

    eat();    # om nom nom
    drink();  # fails, can't drink outside of the block

=end programlisting

You may also export (L<exporting>) a subroutine to make it available to another
scope.

X<anonymous subroutines>
X<subroutines; anonymous>
X<subroutines; first-class>
X<first-class subroutines>

Perl 6 subroutines are objects. You can pass them around and store them in data
structures just as you can do with any other piece of data.  Programming
language designers often call these I<first-class subroutines>; they are as
fundamental to and usable from the language as are hashes or arrays.

First-class subroutines can help you solve complex problems.  For example, to
make a little ASCII art dancing figure, you could build up a hash where the
keys are names of the dance moves, and the values are anonymous subroutines.
Assume that users should be able to enter a list of moves (perhaps on a dance
pad or other exotic input device).  How can you maintain a variable list of
custom behaviors, allow user input, and restrict that input to a safe set of
behaviors?

TODO this example uses the ~= operator before it's been introduced.
TODO this example doesn't seem like a good one for first-class subs.

=begin programlisting

    my $dance = '';
    my %moves =
        hands-over-head => sub { $dance ~= '/o\ '   },
        bird-arms       => sub { $dance ~= '|/o\| ' },
        left            => sub { $dance ~= '>o '    },
        right           => sub { $dance ~= 'o< '    },
        arms-up         => sub { $dance ~= '\o/ '   };

    my @awesome-dance = <arms-up bird-arms right hands-over-head>;

    for @awesome-dance -> $move {
        %moves{$move}.();
    }

    say $dance;

=end programlisting

From the output of this program, you can observe that doing the YMCA dance in
ASCII art looks just as bad as in real life.

=head1 Adding Signatures

X<parameter>
X<subroutines; signature>
X<signatures; subroutines>

A subroutine signature performs two tasks. First, it declares the arguments
which callers may or must pass to the subroutine. Second, it declares the
variables in the subroutine to which the arguments are bound. These variables
are called I<parameters>.  Perl 6 signatures go further; they allow you to
constrain the values of arguments and to match against and extract parts of
complex data structures.

TODO A third task: specifying a return type.

=head2 The Basics

In its simplest form, a signature is a comma separated list of variable names
to which to bind incoming arguments.

=begin programlisting

    sub order-beer($type, $pints) {
        say ($pints == 1 ?? 'A pint' !! "$pints pints") ~ " of $type, please."
    }

    order-beer('Hobgoblin', 1);    # A pint of Hobgoblin, please.
    order-beer('Zlatý Bažant', 3); # 3 pints of Zlatý Bažant, please.

=end programlisting

The use of the term I<bound> instead of I<assigned> is significant. The
variables in your signature are read-only references to the passed arguments.
You cannot modify passed-in values within the subroutine.

If read-only binding is too limiting, you can relax this restriction.  A
parameter marked C<is rw> means that you can modify the passed argument within
the subroutine.  Any modification will modify the original in place.  If you
attempt to pass a literal or some other constant value for an C<rw> parameter,
the binding will fail at the point of the call, throwing an exception:

=begin programlisting

    sub make-it-more-so($it is rw) {
        $it ~= substr($it, $it.chars - 1) x 5;
    }

    my $happy = "yay!";
    make-it-more-so($happy);
    say $happy;                # yay!!!!!!
    make-it-more-so("uh-oh");  # Fails; can't modify a constant

=end programlisting

If, instead, you want your own copy of the argument to work with inside the
subroutine--to leave the original untouched--mark the parameter C<is copy>:

=begin programlisting

    sub say-it-one-higher($it is copy) {
        $it++;
        say $it;
    }

    my $unanswer = 41;
    say-it-one-higher($unanswer);  # 42
    say-it-one-higher(41);         # 42

=end programlisting

=for author

The final sentence of the next paragraph seems superfluous; is it necessary to
discuss out parameters here?

=end for

The extra verbosity of marking parameters as mutable may seem excessive, but
it's likely you won't use these modifiers often.  While certain languages
require you to mark parameters as C<rw> to emulate returning multiple results
from a single subroutine, Perl allows you to return multiple values directly.

=head2 Passing Arrays, Hashes and Code

A variable's sigil indicates its intended use.  In a signature, a variable's
sigil acts as a constraint on the type of argument passed.  The C<@> sigil, for
example, checks that the passed value does the C<Positional> role.  Failing to pass
something that matches this constraint will cause the call to fail.

TODO: note the forward reference to roles and/or Positional.

=begin programlisting

    sub shout-them(@words) {
        for @words -> $w {
            print uc("$w ");
        }
    }

    my @last_words = <do not want>;
    shout-them(@last_words);  # DO NOT WANT
    shout-them('help');       # Fails; a string is not iterable

=end programlisting

Similarly, the C<%> sigil implies that the caller must pass something that is
C<Associative>--something which allows indexing through the C<< <...> >> or
C<{...}> operations. The C<&> sigil requires that the caller pass something
callable, such as an anonymous subroutine. In that case, you may also call the
callable parameter without the C<&> sigil:

=begin programlisting

    sub do-it-lots(&it, $how-many-times) {
        for 1..$how-many-times {
            it();
        }
    }

    do-it-lots(sub { say "Eating a stroopwafel" }, 10);

=end programlisting

A scalar (the C<$> sigil) implies no constraints.  Anything may bind to it,
even if it could also bind to one of the other sigils.

=head2 Interpolating Arrays and Hashes

Sometimes you want to fill positional arguments from an array. Instead of
writing C<eat(@food[0], @food[1], @food[2], ...)> and so on, you can
I<flatten> them into the argument list by prepending a vertical bar:
C<eat(|@food)>.

Likewise, you can interpolate hashes into named arguments:

=begin programlisting

    sub order-shrimps($number, $from) {
        say "I'd like $count pieces of shrimp from the $from, please";
    }

    my %user-preferences = ( from => 'Northern Sea' );
    order-shrimps(3, |%user-preferences)

=end programlisting

=head2 Optional Parameters

Sometimes, passing an argument may be unnecessary.  Other parameters can have
sensible default values. In these cases, it is possible to mark such parameters
as optional, so those calling the subroutine can choose whether to pass an
argument.

Either assign a default value to the parameter in the signature:

=begin programlisting

    sub order-steak($how = 'medium') {
        say "I'd like a steak, $how";
    }

    order-steak();
    order-steak('well done');

=end programlisting

... or append a question mark to the parameter's name, in which case the
parameter binds to an undefined value if no argument is passed:

=begin programlisting

    sub order-burger($type, $side?) {
       say "I'd like a $type burger" ~
           ( defined($side) ?? " with a side of $side" !! "" );
    }

    order-burger("triple bacon", "deep fried onion rings");

=end programlisting

=head2 Named Parameters

When a subroutine has many parameters, it is often easier to pass parameters by
name instead of trying to remember the correct order of parameters.  Note that
when you do so, the order in which they appear as arguments does not matter:

=begin programlisting

    sub order-beer($type, $pints) {
        say ($pints == 1 ?? 'A pint' !! "$pints pints") ~ " of $type, please."
    }

    order-beer(type => 'Hobgoblin', pints => 1);
    # A pint of Hobgoblin, please.

    order-beer(pints => 3, type => 'Zlatý Bažant');
    # 3 pints of Zlatý Bažant, please.

=end programlisting

You may also specify that an incoming argument may only fill a parameter when
passed by name, such that no positional argument may successfully bind to it.
To do this, precede the name of the parameter with a colon:

=begin programlisting

    sub order-shrimps($count, :$from = 'North Sea') {
        say "I'd like $count pieces of shrimp from the $from, please";
    }

    order-shrimps(6);                       # takes 'North Sea'
    order-shrimps(4, from => 'Atlantic Ocean');
    order-shrimps(22, 'Mediterranean Sea'); # not allowed, :$from is named only

=end programlisting

Unlike positional parameters, named parameters are optional by default.
Appending a C<!> makes it mandatory.

=begin programlisting

    sub design-ice-cream-mixture(:$name!, $base = 'Vanilla') {
        say "Creating a new recipe named $name!"
    }

    design-ice-cream-mixture(name => 'Plain');
    design-ice-cream-mixture(base => 'Strawberry chip'); # missing $name

=end programlisting

=head3 Renaming Parameters

Because you must use their names when passing named parameters, parameter names
are part of a subroutine's public API.  Choose them carefully!  Sometimes it
may be convenient to expose a parameter with one name while binding to a
variable of a different name:

=begin programlisting

    sub announce-time(:dinner($supper) = '8pm') {
        say "We eat dinner at $supper";
    }

    announce-time(dinner => '9pm');      # We eat dinner at 9pm

=end programlisting

Parameters can also have multiple names. If some of your users are British and
others are Americans, you might write:

=begin programlisting

    sub paint-rectangle(
            :$x      =   0,
            :$y      =   0,
            :$width  = 100,
            :$height =  50,
            :color(:colour($c))) {

       # print a piece of SVG that reprents a rectangle
       say qq[<rect x="$x" y="$y" width="$width" height="$height"
                     style="fill: $c" />]
    }

    # both calls work the same
    paint-rectangle :color<Blue>;
    paint-rectangle :colour<Blue>;

    # of course you can still fill the other options
    paint-rectangle :width(30), :height(10), :colour<Blue>;

=end programlisting

=head3 Alternative Named Argument Syntaxes

=for author

This section is confusing.  I've tried to clarify.

=end for

Named arguments are actually C<Pair>s (of keys and values).  There are multiple
ways to write C<Pair>s.  The difference between the approaches is primarily one
of clarity, as each alternative provides a different quoting mechanism.  These
three calls all mean the same thing:

=begin programlisting

    announce-time(dinner => '9pm');
    announce-time(:dinner('9pm'));
    announce-time(:dinner<9pm>);

=end programlisting

If you're passing a boolean value, you may omit the value portion of the pair:

=begin programlisting

    toggle-blender( :enabled); # enables  the blender
    toggle-blender(:!enabled); # disables the blender

=end programlisting

A named argument of the form C<:name> with no value has an implicit value of
C<Bool::True>.  The negated form of this, C<:!name>, has an implicit value of
C<Bool::False>.

If you use a variable to create a pair, you can reuse the variable name as the
key of the pair.

=begin programlisting

    my $dinner = '9pm';
    announce-dinner :$dinner;  # same as dinner => $dinner;

=end programlisting

L<pair_forms> lists possible C<Pair> forms and their meanings.

=begin table C<Pair> forms and their meanings

Z<pair_forms>

=headrow

=row

=cell Shorthand

=cell Long form

=cell Description

=bodyrows

=row

=cell C<< :allowed >>

=cell C<< allowed => Bool::True >>

=cell Boolean flag

=row

=cell C<< :!allowed >>

=cell C<< allowed => Bool::False >>

=cell Boolean flag

=row

=cell C<< :bev<tea coffee> >>

=cell C<< bev => ('tee', 'coffee') >>

=cell List

=row

=cell C<< :times[1, 3] >>

=cell C<< times => [1, 3] >>

=cell Array

=row

=cell C<< :opts{ a => 2 } >>

=cell C<< opts => { a => 2 } >>

=cell Hash

=row

=cell C<< :$var >>

=cell C<< var => $var >>

=cell Scalar variable

=row

=cell C<< :@var >>

=cell C<< var => @var >>

=cell Array variable

=row

=cell C<< :%var >>

=cell C<< var => %var >>

=cell Hash variable

=end table

You can use any of these forms in any context where you can use a C<Pair>
object. For example, when populating a hash:

=begin programlisting

    # TODO: better example
    my $black = 12;
    my %color-popularities = :$black, :blue(8),
                             red => 18, :white<0>;

=end programlisting

Finally, to pass an existing C<Pair> object to a subroutine by position, not
name, either put it in parentheses (like C<(:$thing)>), or use the C<< => >>
operator with a quoted string on the left-hand side: C<< "thing" => $thing >>.

=head2 Slurpy Parameters

X<slurpy>

In an earlier example the function C<shout-it> accepted an array argument.
This prevented users from passing in a single argument. To enable both
possibilities, or to allow multiple positional arguments and even multiple
array arguments all of which will flatten into a single array parameter in the
subroutine, prepend the I<slurpy> prefix (C<*>) to the parameter name:

=begin programlisting

    sub shout-them(*@words) {
        for @words -> $w {
            print uc("$w ");
        }
    }

    # now you can pass items
    shout-them('go');           # GO
    shout-them('go', 'home');   # GO HOME

    my @words = ('go', 'home');
    shout-them(@words);         # still works

=end programlisting

A slurpy parameter--a parameter preceded by an asterisk (C<*>)--stores all
remaining unbound positional arguments in an array.  Likewise, C<*%hash> slurps
all the remaining unbound named arguments into a hash.

Slurpy arrays and hashes allow you to pass all positional and named arguments
to another routine:

=begin programlisting

    sub debug-wrapper(&code, *@positional, *%named) {
        warn "Calling '&code.name()' with arguments "
             ~ "@positional.perl(), %named.perl()\n";
        code(|@positional, |%named);
        warn "... back from '&code.name()'\n";
    }

    debug-wrapper(&order-shrimps, 4, from => 'Atlantic Ocean');

=end programlisting

=head1 Returning Results

Subroutines can also return values.  The ASCII art dancing example from earlier
in this chapter is simpler when each subroutine returns a new string:

=begin programlisting

    my %moves =
       hands-over-head => sub { return '/o\ '   },
       bird-arms       => sub { return '|/o\| ' },
       left            => sub { return '>o '    },
       right           => sub { return 'o< '    },
       arms-up         => sub { return '\o/ '   };

    my @awesome-dance = <arms-up bird-arms right hands-over-head>;

    for @awesome-dance -> $move {
        print %moves{$move}.();
    }

    print "\n";

=end programlisting

A Perl subroutine can return multiple values:

=begin programlisting

    sub menu {
        if rand < 0.5 {
            return ('fish', 'white wine')
        } else {
            return ('steak', 'red wine');
        }
    }

    my ($food, $beverage) = menu();

=end programlisting

X<return>

If you exclude the C<return> statement, Perl will return the value produced by
the last statement run inside the subroutine.  This simplifies the previous
example:

=begin programlisting

    sub menu {
        if rand < 0.5 {
            'fish', 'white wine'
        } else {
            'steak', 'red wine';
        }
    }

    my ($food, $beverage) = menu();

=end programlisting

X<return; implicit>

Be wary of relying on this: when the flow of control within a subroutine is
sufficiently complex, adding an explicit C<return> will clarify the code. As a
general rule, only the simplest subroutines benefit from implicit C<return>.

C<return> has the additional effect of immediately exiting the subroutine:

=begin programlisting

    sub create-world(*%characteristics) {
        my $world = World.new(%characteristics);
        return $world if %characteristics<temporary>;

        save-world($world);
    }

=end programlisting

... and you'd better not misplace your new C<$world> if it's temporary, as it's
the only one you're going to get.

=head1 Working With Types

Many subroutines cannot meaningfully work with arbitrary parameters, but
require that the parameters support certain methods or have other properties.
In these cases, it makes sense to restrict the types of parameters, such that
attempts to pass incorrect values as arguments will cause Perl to raise an
error at the time of calling the subroutine.

=head2 Basic Types

X<constraint; type>
X<parameter type constraint>

The easiest way to restrict the possible values that a subroutine accepts is by
writing a type name before a parameter.  For example, a subroutine that
performs numeric calculations on its parameters could require that its
arguments are of the type C<Numeric>:

=begin programlisting

    sub mean(Numeric $a, Numeric $b) {
        return ($a + $b) / 2;
    }

    say mean 2.5, 1.5;
    say mean 'some', 'strings';

=end programlisting

This produces the output:

=begin screen

    2
    Nominal type check failed for parameter '$a';
        expected Numeric but got Str instead

=end screen

If multiple parameters have type constraints, each argument must fulfill the
type constraint of the parameter to which it binds.

=head2 Adding Constraints

X<constraint>
X<where>

Sometimes a type name is insufficient to describe the requirements for an
argument. In this case, you may add an additional I<constraint> to the
parameter with a C<where> block:

=begin programlisting

    sub circle-radius-from-area(Numeric $area where { $area >= 0 }) {
        ($area / pi).sqrt
    }

    say circle-radius-from-area(3);    # OK
    say circle-radius-from-area(-3);   # Error

=end programlisting

Because the calculation is meaningful only for non-negative area values, the
parameter includes a constraint which returns C<True> for non-negative values.
If this constraint returns a false value, the type check will fail when
something calls this subroutine.

The block after the C<where> optional; Perl performs the check by smart
matching the argument against whatever follows the C<where>. It is possible to
accept arguments in a certain range by writing:

=begin programlisting

    sub set-volume(Numeric $volume where 0..11) {
        say "Turning it up to $volume";
    }

=end programlisting

To constrain arguments to those existing keys of a hash:

=begin programlisting

    my %in-stock = 'Staropramen' => 8, 'Mori' => 5, 'La Trappe' => 9;

    sub order-beer(Str $name where %in-stock) {
        say "Here's your $name";
        %in-stock{$name}--;
        if %in-stock{$name} == 0 {
            say "OH NO! That was the last $name, folks! :'(";
            %in-stock.delete($name);
        }
    }

=end programlisting

=head1 Captures

X<captures>
X<Capture>

In one sense, a signature is a collection of parameters. Captures fill the same
niche for arguments. Just as you rarely think of a signature as a
whole--instead focusing on individual parameters--you rarely have to think
about captures.  When you do, Perl 6 allows you to manipulate captures
directly.

Captures have both positional and named parts which act like lists and hashes,
respectively. The list-like parts contain positional arguments and the
hash-like parts contain named arguments.

=head2 Creating And Using A Capture

=for author

"Interpolate" seems like the wrong word here; is there a better rephrasing?

=end for

To build a capture, use the C<\(...)> syntax. Like arrays and hashes, you can
interpolate a capture into an argument by using C<|>:

=begin programlisting

    sub act($left, $right, :$action) {
        $action($left, $right);
    }

    my @tasks = \(39, 3, action => { say $^a + $^b }),
                \(6, 7, action => { say $^a * $^b });

    for @tasks -> $task-args {
        act(|$task-args);
    }

=end programlisting

This program creates an array of captures, each of which contains two
positional arguments and one named argument. It then iterates over the array,
making a call to C<act> with each argument set. Perl 6 allows you to specify
the arguments for a call and the call itself separately, so as to apply the
same arguments over many calls, or the same call to many sets of arguments.
The code that performs the application need not know whether any of the
arguments are named or positional.

Unlike signatures, captures work like references. Any variable mentioned in a
capture exists in the capture as a I<reference> to the variable.  Thus C<rw>
parameters still work with captures involved.

=begin programlisting

    my $value     = 7;
    my $to-change = \($value);

    sub double($x is rw) {
        $x *= 2;
    }

    sub triple($x is rw) {
        $x *= 3;
    }

    triple(|$to-change);
    double(|$to-change);

    say $value; # 42

=end programlisting

Perl types with both positional and named parts also show up in various other
situations. For example, regex matches have both positional and named
matches--C<Match> objects themselves are a type of capture. It's also possible
to conceive of an XML node type that is a type of capture, with named
attributes and positional children.  Binding this node to a function could use
the appropriate parameter syntax to work with various children and attributes.

=for author

I have the temptation to write "And this is a great way to implement the guts
of a compiler, as Perl 6 itself does!"

=end for

=head2 Captures In Signatures

All calls build a capture on the caller side and unpack it according to the
signature on the callee sideN<An optimizing Perl 6 compiler may, of course, be
able to optimize away part or all of this process, depending on what it knows
at compilation time.>. It is also possible to write a signature that binds the
capture itself into a variable. This is especially useful for writing routines
that delegate to other routines with the same arguments.

=begin programlisting

    sub visit-czechoslovakia(|$plan) {
        warn "Sorry, this country has been deprecated.";
        visit-slovakia(|$plan);
        visit-czech-republic(|$plan);
    }

=end programlisting

The benefit of using this over a signature like C<:(*@pos, *%named)> is that
these both enforce some context on the arguments, which may be premature. For
example, if the caller passes two arrays, they would flatten into C<@pos>. This
means that the two nested arrays could not be recovered at the point of
delegation. A capture preserves the two array arguments, so that the final
callee's signature may determine how to bind them.

=head1 Unpacking

Sometimes you need to work with only part of an array or a hash.  You can do
that with ordinary slicing access, or you can use signature binding:

=begin programlisting

    sub first-is-largest(@a) {
        my $first = @a.shift;
        # TODO: either explain junctions, or find a
        # concise way to write without them
        return $first >= all(@a);
    }

    # same thing:
    sub first-is-largest(@a) {
        my :($first, *@rest) := \(|@a)
        return $first >= all(@rest);
    }

=end programlisting

The signature binding approach might seem clumsy, but when you use it in the
main signature of a subroutine, you get tremendous power:

=begin programlisting

    sub first-is-largest([$first, *@rest]) {
        return $first >= all(@rest);
    }

=end programlisting

X<unpacking>
X<signature unpacking>
X<subsignature>

The brackets in the signature tell the compiler to expect a list-like argument.
Instead of binding to an array parameter, it instead I<unpacks> its arguments
into several parameters--in this case, a scalar for the first element and an
array for the rest.  This I<subsignature> also acts as a constraint on the
array parameter: the signature binding will fail unless the list in the capture
contains at least one item.

Likewise you can unpack a hash by using C<%(...)> instead of square brackets,
but you must access named parameters instead of positional.

=for author

Is this a little too cute?

=end for

=begin programlisting

    sub create-world(%(:$temporary, *%characteristics)) {
        my $world = World.new(%characteristics);
        return $world if $temporary;

        save-world($world);
    }

=end programlisting

# TODO: come up with a good example

# TODO: generic object unpacking

=head1 Currying

=for author

This explains some of the I<why> of currying, but not much of the I<what>.  Is
that necessary?  Also, I<currying> or I<partial application>?

=end for

Consider a module that provided the example from the "Optional Parameters"
section:

=begin programlisting

    sub order-burger( $type, $side? ) { ... };

=end programlisting

If you used C<order-burger> repeatedly, but often with a side of french fries,
you might wish that the author had also provided a C<order-burger-and-fries>
sub.  You could easily write it yourself:

=begin programlisting

    sub order-burger-and-fries ( $type ) {
        order-burger( $type, side => 'french fries' );
    }

=end programlisting

If your personal order is always vegetarian, you might instead wish for a
C<order-the-usual> sub. This is less concise to write, due to the optional
second parameter:

=begin programlisting

    sub order-the-usual ( $side? ) {
        if ( $side.defined ) {
            order-burger( 'veggie', $side );
        }
        else {
            order-burger( 'veggie' );
        }
    }

=end programlisting

Currying gives you a shortcut for these exact cases; it creates a new sub from
an existing sub, with parameters already filled in. In Perl 6, curry with the
C<.assuming> method:

=begin programlisting

    &order-the-usual        := &order-burger.assuming( 'veggie' );
    &order-burger-and-fries := &order-burger.assuming( side => 'french fries' );

=end programlisting

The new sub is like any other sub, and works with all the various
parameter-passing schemes already described.

=begin programlisting

    order-the-usual( 'salsa' );
    order-the-usual( side => 'broccoli' );

    order-burger-and-fries( 'plain' );
    order-burger-and-fries( :type<<double-beef>> );

=end programlisting

=head1 Introspection

Subroutines and their signatures are objects like any other. Besides calling
them, you can learn things about them, including the details of their
parameters:

=begin programlisting

    sub logarithm(Numeric $x, Numeric :$base = exp(1)) {
        log($x) / log($base);
    }

    my @params = &logarithm.signature.params;
    say @params.elems, ' parameters';

    for @params {
        say "Name:       ", .name;
        say "  Type:     ", .type;
        say "  named?    ", .named    ?? 'yes' !! 'no';
        say "  slurpy?   ", .slurpy   ?? 'yes' !! 'no';
        say "  optional? ", .optional ?? 'yes' !! 'no';
    }

=end programlisting

=begin screen

    2 parameters
    Name:       $x
      Type:     Numeric()
      named?    no
      slurpy?   no
      optional? no
    Name:       $base
      Type:     Numeric()
      named?    yes
      slurpy?   no
      optional? yes

=end screen

The C<&> sigil followed by a subroutine name gets the object representing that
subroutine. C<&logarithm.signature> returns the signature associated with the
subroutine, and calling C<.params> on the signature returns a list of
C<Parameter> objects. Each of these objects describes one parameter in detail.

=begin table Methods in the Parameter class

# stolen straight from S06, adapted a bit

=headrow

=row

=cell method

=cell description

=bodyrows

=row

=cell name

=cell The name of the lexical variable to bind to, if any

=row

=cell type

=cell The nominal type

=row

=cell constraints

=cell Any further type constraints

=row

=cell readonly

=cell True if the parameter has C<is readonly> trait

=row

=cell rw

=cell True if the parameter has C<is rw> trait

=row

=cell copy

=cell True if the parameter has C<is copy> trait

=row

=cell named

=cell True if the parameter is to be passed by name

=row

=cell named_names

=cell List of names a named parameter can be passed as

=row

=cell slurpy

=cell True if the parameter is slurpy

=row

=cell optional

=cell True if the parameter is optional

=row

=cell default

=cell A closure returning the default value

=row

=cell signature

=cell A nested signature to bind the argument against

=end table

# TODO: talk about &signature.cando once that's implemented

Signature introspection allows you to build interfaces that can obtain and then
pass the right data to a subroutine. For example, you could build a web form
generator that knew how to get input from a user, validate it, and then call a
routine with it based upon the information obtained through introspection.  A
similar approach might generate a command line interface along with some basic
usage instructions.

=for author

Link to traits section.

=end for

Beyond this, traits (L<traits>) allow you to associate extra data with
parameters.  This metadata can go far beyond that which subroutines,
signatures, and parameters normally provide.

=for editor vim: se spell
