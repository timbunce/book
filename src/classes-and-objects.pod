=head0 Classes and Objects

TODO: start with a much simpler bare-bones example!

The following program shows how a dependency handler might look in Perl 6.
It showcases custom constructors, private and public attributes, methods
and various aspects of signatures. It's not very much code, and yet the
result is interesting and, at times, useful.

=begin programlisting

    class Task {
        has      &!callback;
        has Task @!dependencies;
        has Bool $.done;

        # RAKUDO: Should really be '&callback' [perl #69766]
        method new(Callable $callback, Task *@dependencies) {
            return self.bless(*, :$callback, :@dependencies);
        }

        method add-dependency(Task $dependency) {
            push @!dependencies, $dependency;
        }

        method perform() {
            unless $!done {
                .perform() for @!dependencies;
                &!callback();
                $!done = True;
            }
        }
    }

    my $eat =
        Task.new({ say 'eating dinner. NOM!' },
            Task.new({ say 'making dinner' },
                Task.new({ say 'buying food' },
                    Task.new({ say 'making some money' }),
                    Task.new({ say 'going to the store' })
                ),
                Task.new({ say 'cleaning kitchen' })
            )
        );

    $eat.perform();

=end programlisting

=head1 Starting with class

X<class>
X<classes>

X<state>
X<has>
X<classes; has>
X<behavior>
X<classes; behavior>

Perl 6, like many other languages, uses the C<class> keyword to introduce a new
class. Anything inside of the block that follows is part of the class
definition. You may place arbitrary code there, just as you can with any other
block, but classes commonly contain declarations.  The example code includes
declarations relating to state (attributes, introduced through the C<has>
keyword) and behavior (methods, through the C<method> keyword).

=for author

Which package?

=end for

X<type object>

Declaring a class creates a I<type object>, which by default gets installed
into the package (just like a variable declared with C<our> scope).  This type
object is an "empty instance" of the class.  You've already seen these.  For
example, types such as C<Int> and C<Str> refer to the type object of one of the
Perl 6 built-in classes.  The example uses the class name C<Task> so that other
code can refer to it later, such as to create class instances by calling the
C<new> method.

=head1 I can has state?

X<attributes>
X<classes; attributes>

X<encapsulation>
X<classes; encapsulation>

The first three lines inside the class block all declare attributes (called
I<fields> or I<instance storage> in other languages).  These are storage
locations that every instance of a class gets.  Just as a C<my> variable can
not be accessed from the outside of its declared scope, attributes are not
accessible outside of the class.  This I<encapsulation> is one of the key
principles of object oriented design.

The first declaration specifies instance storage for a callback -- a bit of
code to invoke in order to perform the task that an object represents:

=begin programlisting

    has &!callback;

=end programlisting

X<sigils; &>
X<twigils>
X<twigils; !>

=for author

A previous paragraph said that all attributes are private to the class.
Explain the subtle distinction here.

=end for

The C<&> sigil indicates that this attribute represents something invocable.
The C<!> character is a I<twigil>, or secondary sigil.  A twigil forms part of
the name of the variable.  In this case, the C<!> twigil emphasizes that this
attribute is private to the class.

The second declaration also uses the private twigil:

=begin programlisting

    has Task @!dependencies;

=end programlisting

=for author

The "subclass" language is slightly wrong, but I don't know if we want to get
into allomorphism here.  Is there a rephrasing that's more correct?

=end for

However, this attribute represents an array of items, so it requires the C<@>
sigil. These items each specify a task that must be completed before the
present one can complete. Furthermore, the type declaration on this attribute
indicates that the array may only hold instances of the C<Task> class (or some
subclass of it).

The third attribute represents the state of completion of a task:

=begin programlisting

    has Bool $.done;

=end programlisting

X<twigils; .>
X<twigils; accessors>
X<accessor methods>
X<classes; accessors>

This scalar attribute (with the C<$> sigil) has a type of C<Bool>.  Instead of
the C<!> twigil, this twigil is C<.>. While Perl 6 does enforce encapsulation
on attributes, it also saves you from writing accessor methods.  Replacing the
C<!> with a C<.> both declares the attribute C<$!done> and an accessor method
named C<done>. It's as if you had written:

=begin programlisting

    has Bool $!done;
    method done() { return $!done }

=end programlisting

Note that this is not like declaring a public attribute, as some languages
allow; you really get I<both> a private storage location and a method, without
having to write the method by hand. You are free instead to write your own
accessor method, if at some future point you need to do something more complex
than return the value.

Note that using the C<.> twigil has created a method that will provide with
readonly access to the attribute. If instead the users of this object should be
able to reset a task's completion state (perhaps to perform it again), you can
change the attribute declaration:

=begin programlisting

    has Bool $.done is rw;

=end programlisting

X<traits; is rw>

The C<is rw> trait causes the generated accessor method to return something
external code can modify to change the value of the attribute.

=head1 Methods

X<methods>
X<classes; methods>

While attributes give objects state, methods give objects behaviors.  Ignore
the C<new> method temporarily; it's a special type of method.  Consider the
second method, C<add-dependency>, which adds a new task to this task's
dependency list.

=begin programlisting

    method add-dependency(Task $dependency) {
        push @!dependencies, $dependency;
    }

=end programlisting

X<invocant>

In many ways, this looks a lot like a C<sub> declaration. However, there are
two important differences. First, declaring this routine as a method adds it to
the list of methods for the current class.  Thus any instance of the C<Task>
class can call this method with the C<.> method call operator.  Second, a
method places its invocant into the special variable C<self>.

The method itself takes the passed parameter--which must be an instance of the
C<Task> class--and C<push>es it onto the invocant's C<@!dependencies>
attribute.

The second method contains the main logic of the dependency handler:

=begin programlisting

    method perform() {
        unless $!done {
            .perform() for @!dependencies;
            &!callback();
            $!done = True;
        }
    }

=end programlisting

It takes no parameters, working instead with the object's attributes. First, it
checks if the task has already completed by checking the C<$!done> attribute.
If so, there's nothing to do.

X<operators; .>

Otherwise, the method performs all of the task's dependencies, using the C<for>
construct to iterate over all of the items in the C<@!dependencies> attribute.
This iteration places each item--each a C<Task> object--into the topic
variable, C<$_>.  Using the C<.> method call operator without specifying an
explicit invocant uses the current topic as the invocant.  Thus the iteration
construct calls the C<.perform()> method on every C<Task> object in the
C<@!dependencies> attribute of the current invocant.

After all of the dependencies have completed, it's time to perform the current
C<Task>'s task by invoking the C<&!callback> attribute directly; this is the
purpose of the parentheses.  Finally, the method sets the C<$!done> attribute
to C<True>, so that subsequent invocations of C<perform> on this object (if this
C<Task> is a dependency of another C<Task>, for example) will not repeat the
task.

=head1 Constructors

X<constructors>

Perl 6 is rather more liberal than many languages in the area of constructors.
A constructor is anything that returns an instance of the class.  Furthermore,
constructors are ordinary methods. You inherit a default constructor named
C<new> from the base class C<Object>, but you are free to override C<new>, as
this example does:

=begin programlisting

    # RAKUDO: Should really be '&callback' [perl #69766]
    method new(Callable $callback, Task *@dependencies) {
        return self.bless(*, :$callback, :@dependencies);
    }

=end programlisting

X<objects; bless>
X<bless>

=for author

What's the C<*> in the C<bless> call?

=end for

The biggest difference between constructors in Perl 6 and constructors in
languages such as C# and Java is that rather than setting up state on a somehow
already magically created object, Perl 6 constructors actually create the
object themselves. This easiest way to do this is by calling the C<bless>
method, also inherited from C<Object>. The C<bless> method expects a positional
parameter--the so-called "candidate"--and a set of named parameters providing
the initial values for each attribute.

The example's constructor turns positional arguments into named arguments, so
that the class can provide a nice constructor for its users. The first
parameter is the callback (the thing to do to execute the task). The rest of
the parameters are dependent C<Task> instances.  The constructor captures these
into the C<@dependencies> slurpy array and passes them as named parameters to
C<bless> (note that C<:$callback> uses the name of the variable--minus the
sigil--as the name of the parameter).

=head1 Consuming our class

After creating a class, you can create instances of the class.  Declaring a
custom constructor provides a simple way of declaring tasks along with their
dependencies. To create a single task with no dependencies, write:

=begin programlisting

    my $eat = Task.new({ say 'eating dinner. NOM!' });

=end programlisting

An earlier section explained that declaring the class C<Task> installed a type
object had been installed in the namespace.  This type object is a kind of
"empty instance" of the class, specifically an instance without any state.  You
can call methods on that instance, as long as they do not try to access any
state; C<new> is an example, as it creates a new object rather than modifying
or accessing an existing object.

Unfortunately, dinner never magically happens.  It has dependent tasks:

=begin programlisting

    my $eat =
        Task.new({ say 'eating dinner. NOM!' },
            Task.new({ say 'making dinner' },
                Task.new({ say 'buying food' },
                    Task.new({ say 'making some money' }),
                    Task.new({ say 'going to the store' })
                ),
                Task.new({ say 'cleaning kitchen' })
            )
        );

=end programlisting

Notice how the custom constructor and sensible use of whitespace allows a
layout which makes task dependencies clear.

Finally, the C<perform> method call recursively calls the C<perform> method on
the various other dependencies in order, giving the output:

    making some money
    going to the store
    buying food
    cleaning kitchen
    making dinner
    eating dinner. NOM!

=head1 Exercises

B<1.> The method C<add-dependency> in C<Task> permits the creation of I<cycles>
in the dependency graph.  That is, if you follow dependencies, you can
eventually return to the original C<Task>. Show how to create a graph with
cycles and explain why the C<perform> method of a C<Task> whose dependencies
contain a cycle would never terminate successfully.

B<Answer:> You can create two tasks, and then "short-circuit" them with
C<add-dependency>:

=begin programlisting

    my $a = Task.new({ say 'A' });
    my $b = Task.new({ say 'B' }, $a);
    $a.add-dependency($b);

=end programlisting

The C<perform> method will never terminate because the first thing the method
does is to call all the C<perform> methods of its dependencies. Because C<$a>
and C<$b> are dependencies of each other, none of them would ever get around to
calling their callbacks. The program will exhaust memory before it ever prints
C<'A'> or C<'B'>.

B<2.> Is there a way to detect the presence of a cycle during the course of a
C<perform> call? Is there a way to prevent cycles from ever forming through
C<add-dependency>?

B<Answer:> To detect the presence of a cycle during a C<perform> call, keep
track of which C<Task>s have started; prevent a C<Task> from starting twice
before finishing:

=for author

It's time to introduce the C<augment> syntax.

Also, C<!$!done> is unnecessarily hard to read if you see ! as a quasi-quoting
symbol.  It's a $ sandwich.

=end for

=begin programlisting

    augment class Task {
        has Bool $!started = False;

        method perform() {
            if $!started++ && !$!done {
                die "Cycle detected, aborting";
            }

            unless $!done {
                .perform() for @!dependencies;
                &!callback();
                $!done = True;
            }
        }
    }

=end programlisting

Another approach is to stop cycles from forming during C<add-dependency> by
checking whether there's already a dependency running in the other direction.
(This is the only situation in which a cycle can occur.)  This requires the
addition of a helper method C<depends-on>, which checks whether a task depends
on another one, either directly or transitively. Note the use of C<»> and
C<[||]> to write succinctly what would otherwise have involved looping over all
the dependencies of the C<Task>:

=begin programlisting

    augment class Task {
        method depends-on(Task $some-task) {
            $some-task === any(@!dependencies)
            [||] @!dependencies».depends-on($some-task)
        }

        method add-dependency(Task $dependency) {
            if $dependency.depends-on(self) {
                warn 'Cannot add that task, since it would introduce a cycle.';
                return;
            }
            push @!dependencies, $dependency;
        }
    }

=end programlisting

B<3.> How could C<Task> objects execute their dependencies in parallel? (Think
especially about how to avoid collisions in "diamond dependencies", where a
C<Task> has two different dependencies which in turn have the same dependency.)

B<Answer:> Enabling parallelism is easy; change the line C<.perform() for
@!dependencies;> into C<@!dependencies».perform()>. However, there may be race
conditions in the case of diamond dependencies, wherein C<Task>s C<A> starts
C<B> and C<C> in parallel, and both start a copy of C<D>, making C<D> run
twice. The solution to this is the same as with the cycle-detection in Question
2: introducing an attribute C<$!started>. Note that it's impolite to die if a
C<Task> has started but not yet finished, because this time it might be due to
parallelism rather than cycles:

=begin programlisting

    augment class Task {
        has Bool $!started = False;

        method perform() {
            unless $!started++ {
                @!dependencies».perform();
                &!callback();
                $!done = True;
            }
        }
    }

=end programlisting

=for authors

It occurs to me that the above solution might not be 100% thread-safe. Is
there a good way to guarantee, in Perl 6, that the attribute C<$!started>
gets checked-and-set atomically?

=end
