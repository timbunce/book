=head0 Operators

X<operator>

Operators are very short names for often used routines. They have special
calling syntax, and can be manipulated by other operators.

Returning to the table tennis example, suppose you want to plot the number of
sets that each player won in a tournament. This example uses the numbers from
the previous chapter, and makes a very simple text output by just printing a
number of C<X> characters to represent horizontal bars.

=begin programlisting

    use v6;

    my @scores = 'Ana' => 8, 'Dave' => 6, 'Charlie' => 4, 'Beth' => 4;

    my $screen-width   = 30;

    my $label-area-width = 1 + [max] @scores».key».chars;
    my $max-score        = [max] @scores».value;
    my $unit             = ($screen-width - $label-area-width) / $max-score;

    for @scores {
        my $format = '%- ' ~ $label-area-width ~ "s%s\n";
        printf $format, .key, 'X' x ($unit * .value);
    }

=end programlisting

Output:

=begin screen

    Ana     XXXXXXXXXXXXXXXXXXXXXX
    Dave    XXXXXXXXXXXXXXXX
    Charlie XXXXXXXXXXX
    Beth    XXXXXXXXXXX

=end screen

The line

=begin programlisting

    my @scores = 'Ana' => 8, 'Dave' => 6, 'Charlie' => 4, 'Beth' => 4;

=end programlisting

already contains three different operators: C<=>, C<< => >> and C<,>.

X<assignment>
X<operator; assignment>
X<operator; =>

The C<=> operator is the I<assignment operator> -- it takes the
values from the right-hand side, and stores them in the variable on the
left-hand side, here C<@scores>.

X<pair>
X<< operator;=> >>
X< operator; fat arrow>

The C<< => >> operator (the C<fat arrow>) constructs C<Pair>
objects. A Pair stores a key and a value; the key is on the left-hand side of
the C<< => >> operator, the value on the right. It also has a specialty: if
the key on the left is a bare identifier, it is taken to be a string. So one
could also write the example above as

=begin programlisting

    my @scores = Ana => 8, Dave => 6, Charlie => 4, Beth => 4;

=end programlisting

Finally, the C<,> operator constructs a C<List>, which is a sequence
of objects. In this case the objects are pairs.

X<infix>
X<operator; infix operators>
X<term>

All of the three operators above are I<infix> operators, which means they
stand in between two I<terms>. A term can be a literal like C<8> or C<'Dave'>,
or a combination of other terms and operators.

X<postcircumfix>
X<operator; postcircumfix>
X<postfix>
X<operator; postfix>

The previous chapter already used other types of operators, too. It contained
the statement C<%games{$p1}++;> which uses the I<postcircumfix> operator
C<{...}>. It stands behind (I<post>) a term, and consists of two symbols (an
opening and a closing curly bracket) which enclose (I<circumfix>) another term.
Behind this postcircumfix operator is an ordinary I<postfix> operator with name
C<++>, which increments the value it qualifies. No whitespace is allowed
between a term and its postfix or postcircumfix operators.

X<postfix>
X<operator; postfix>

Yet another operator type is the I<prefix> operator, which stands in front of
a term. An example is the C<-> operator, which negates the following numeric
value, as in C<my $x = -4>.

But the C<-> operator can also mean subtraction, so C<say 5 - 4> will print a
C<1>. To distinguish the prefix operator C<-> from the infix operator C<->,
the Perl 6 parser always keeps track of whether it expects an infix
operator or a term. A term can have zero or more prefix operators, so you can
actually write C<say 4 + -5>. After the C<+> (an infix operator), the compiler
expects a term, thus the C<-> is interpreted as a prefix operator to the term
C<5>.

The next new line containing new features is

=begin programlisting

    my $label-area-width = 1 + [max] @scores».key».chars;

=end programlisting

It begins harmlessly with a variable declaration C<my $label-area-width> and an
assignment to it. Next comes a simple numeric addition, C<1 + ...>. The right
side of the C<+> operator is more complicated.

X<operator; max>

In Perl 6 there is an infix C<max> operator which returns the greater of two
values, so C<2 max 3> returns 3. Square brackets around an infix
operator indicate that it is applied to a list piece by piece. So C<[max] 1, 5,
3, 7> is the same as C<1 max 5 max 3 max 7> and evaluates to C<7>.

Likewise, you can write C<[+]> to get the sum of a list of values, C<[*]> for
the product, and use C<< [<=] >> to check if a list is ordered by ascending
values.

After the C<[max]> you see the expression C<@scores».key».chars>. Just like
C<@variable.method> calls a method on C<@variable>, C<@array».method>
calls a method for each item in C<@array>, and returns the list of the return
values.

» is called a I<hyper operator>. It is a unicode character that
can be entered on most computers
N<Ubuntu 10.4: In System/Preferences/Keyboard/Layouts/Options/Compose Key position
select on of the keys to be the "Compose" key. Then press
Compose-key and the "greater than" key twice.>
If your operating system does not make it easy to write it you can also write it using two angle brackets (>>).

So C<@scores».key> is a list of all the keys of the pair objects in C<@scores>,
and C<@scores».key».chars> is a list of the length of all keys in C<@scores>.

The expression C<[max] @scores».key».chars> gives the largest of these
values. It is the same as

=begin programlisting

    @scores[0].key.chars
        max @scores[1].key.chars
        max @scores[2].key.chars
        max ...

=end programlisting

X<meta operator; reduction>
X<meta operator; []>

The square brackets are called the I<reduction meta operator>: it transforms
the enclosed infix operator into an operator that expects a list (a
I<listop>), and carries out the operation between each two consecutive list
items.

For plotting the names of the players and bar charts, the program needs to
know how much space to allocate for the player names. Adding 1 to it leaves
space for a single blank space between the name of the longest player and the
left edge of the bars.

=begin programlisting

    my $max-score       = [max] @scores».value;

=end programlisting

With this line the program determines the maximum score. The drawing area has
the width C<$screen-width - $label-area-width>, so for each score we can print

=begin programlisting

    my $unit = ($screen-width - $label-area-width) / $max-score;

=end programlisting

amount of C<X> characters. This expression uses the infix operators C<-> and
C</> for numerical calculations.

Now all the necessary informations are in place and the chart can be printed:

=begin programlisting

    for @scores {
        my $format = '%- ' ~ $label-area-width ~ "s%s\n";
        printf $format, .key, 'X' x ($unit * .value);
    }

=end programlisting

These lines loop over the items in C<@scores>, binding them to the special
variable C<$_> one at a time. For each such item, the program uses the
C<printf> built-in function to print both the name of the player and a bar.

X<printf>

It is similar to C<printf> functions of the C and Perl 5 programming
languages. It takes a format string, which specifies how to print the
following parameters. If C<$label-area-width> is 8, the format string is
C<"%- 8s%s\n">, which means a string (C<'s'>) filled to 8 spaces (C<' 8'>) and
left-justified (C<'-'>), followed by another string and a newline.

The first string is the name of the player, the second is the bar.

X<operator; x>
X<repetition operator>

The bar is generated with the infix C<x> operator, the
I<repetition operator>. It takes a string on the left-hand side and a number
on the right-hand side, and sticks the strings together as many times as the
number specifies. So C<'ab' x 3> returns the string C<'ababab'>. C<.value>
returns the value of the current pair, C<($unit * .value)> multiplies that
values with C<$unit>, and C<'X' x ($unit * .value)> returns as that many C<X>
characters.

=head1 A Word on Precedence

X<operator precedence>
X<precedence>

The explanations of the example above have one implication, which was not yet
explicitly mentioned. In the line

=begin programlisting

    my @scores = 'Ana' => 8, 'Dave' => 6, 'Charlie' => 4, 'Beth' => 4;

=end programlisting

The right-hand side of the assignment produces a list (because of the C<,>
operator) that is made of pairs (because of C<< => >>), and the result is then
assigned to the array variable. But you could think of
other ways that Perl 6 interprets this program. If you pass this line to the
Perl 5 interpreter, it parses it as

=begin programlisting

    (my @scores = 'Ana') => 8, 'Dave' => 6, 'Charlie' => 4, 'Beth' => 4;

=end programlisting

and thus stores only one item in the variable C<@scores>, the rest is
parsed as a list  N<and discarded, because it is not stored in any variable>.

The ways in which this statement is parsed in Perl 6 is governed by
I<precedence rules>. For example, they state that the infix C<< => >> operator
binds its arguments tighter than the infix C<,> operator, which in turn binds
tighter than the C<=> assignment operator N<there are actually two assignment
operators with different precedence. When the right-hand side appears to be a
list or an array, the looser one is used, otherwise the I<item assignment
operator> with tighter precedence is used. This allows the two expressions C<$a = 1, $b = 2>
and C<@a = 1, 2> to both mean something sensible: assignment to two variables in a list,
and assignment of a two-item list to a single variable>.


The precedence rules for Perl 6 allow many commonly used idioms to be expressed
naturally and without any parentheses, or even without thinking about
precedence. If you want to force a different way of parsing, parentheses can be
used around an expression. Then this parenthesis group has the tightest
possible precedence.

=begin programlisting

    say 5 - 7 / 2;      # 5 - 3.5  = 1.5
    say (5 - 7) / 2;    # (-2) / 2 =  -1

=end programlisting

=for author

    TODO: list of precedence levels?

=end for

=head1 Comparisons and Smart Matching

X<object identity>

There are several ways to compare objects in Perl. You can ask if two
variables contain the same object with the C<===> infix operator. If it
returns C<True>, modifying one of its arguments also modifies the other,
because they really point to the same object.

=begin programlisting

    my @a = 1, 2, 3;
    my @b = 1, 2, 3;

    say @a  === @a;    # 1
    say @a  === @b;    # 0

    # built-in, immutable types act as singletons:

    say 3   === 3;     # 1
    say 'a' === 'a';   # 1
 
=end programlisting

TODO 'immutable' is used above but hasn't been explained

The C<eqv> operator returns C<True> only if two objects are of the same type,
and of the same structure. With the variables defined above, C<@a eqv @b> is
true because C<@a> and C<@b> contain the same values each. On the other hand
C<'2' eqv 2> returns C<False>, because the left argument is a string, the
right an integer and so they are not of the same type.

TODO clarify "same structure"

=head2 Numeric Comparisons

You can ask if two objects have the same numeric value with the C<==> infix 
operator.  If one of the objects is not numeric,  Perl will do its best to
make it numeric before doing the comparison.  If there is no good way to 
convert an object to a number, the default of C<0> is assumed.

=begin programlisting

    say 1 == 1.0;      # 1
    say 1 == '1';      # 1
    say 1 == '2';      # 0
    say 3 == '3b'      # 1

=end programlisting

The operators C<< < >>, C<< <= >>, C<< >= >> and C<< > >> can be used to
compare the relative size of numbers, C<!=> returns True if the two objects
differ in their numerical value.

When you use an array or list as a number, it evaluates to the number of items
in that list.

=begin programlisting

    my @colors = <red blue green>;

    if @colors == 3 {
        say "It's true, @colors contains 3 items";
    }

=end programlisting

=head2 String Comparisons

Just like C<==> converts its arguments to numbers before comparing, C<eq> as
an infix operator compares for string equality, and converts its arguments to
strings if necessary.

=begin programlisting

    if $greeting eq 'hello' {
        say 'welcome';
    }

=end programlisting

Other operators compare strings lexicographically

=begin table

=headrow

=row

=cell Number Comparison

=cell String Comparison

=cell Stands for

=bodyrows

=row

=cell ==

=cell eq

=cell equals

=row

=cell !=

=cell ne

=cell not equal

=row

=cell !==

=cell !eq

=cell not equal

=row

=cell <

=cell lt

=cell less than

=row

=cell <=

=cell le

=cell less or equal

=row

=cell >

=cell gt

=cell greater than

=row

=cell >=

=cell ge

=cell greater or equal

=end table

For example C<'a' lt 'b'> is true, and likewise C<'a' lt 'aa'>.

=head3 Three-way Comparison

X<leg>
X<cmp>
X<< <=> >>

The three-way comparison operators take two operands, and return C<-1> if the
left is smaller, C<0> when both are equal, and C<+1> if the right operand is
smaller. For numbers that operator is spelled C<< <=> >>, and for strings
C<leg> (from I<l>esser, I<e>qual, I<g>reater). The infix C<cmp> operator is a
type sensitive three-way comparison operator, and compares numbers like
C<< <=> >>, string like C<leg>, and for example pairs first by key, and
then by values if the keys are identical.

=begin programlisting

    say 10   <=> 5;       # +1
    say 10   leg 5;       # because '1' lt '5'
    say 'ab' leg 'a';     # +1, lexicographic comparison

=end programlisting

A typical use case for three-way comparison is sorting. The C<sort> method in
lists can take a block or function that takes two values, compares them,
returns -1, 0 or +1. The sort method then orders the values according to that
return value.

=begin programlisting

    say ~<abstract Concrete>.sort;
    # output: Concrete abstract

    say ~<abstract Concrete>.sort:
            -> $a, $b { uc($a) leg uc($b) };
    # output: abstract Concrete

=end programlisting

The default comparison is case sensitive; by comparing not the values, but
their upper case variant, the example above sorts case insensitively.

=head2 Smart Matching

The various comparison operators that we have seen so far all coerce their
arguments to certain types before comparing them. This is useful if you wish
to be very specific about what kind of comparison you want and are unsure of
the types of the things that are being compared. Perl 6 also provides another
operator that allows you to perform comparisons that just Do The Right Thing.
It's C<~~>, the smart match operator.

=begin programlisting

    if $pints-drunk ~~ 8 {
        say "Go home, you've had enough!";
    }

    if $country ~~ 'Sweden' {
        say "Meatballs with lingonberries and potato moose, please."
    }

    unless $group-size ~~ 2..4 {
        say "You must have between 2 and 4 people to book this tour.";
    }

=end programlisting

The smart match operator always decides what kind of comparision to do based
upon the type of the value on the right hand side. In the three examples above,
it would do a numeric, a string and a range comparision respectively. While
we've already seen operators to do numeric and string comparisons -- C<==> and
C<eq> -- there is no operator for comparing ranges. This is part of the power
of smart matching: more complex types can define interesting and useful ways to
compare themselves to other things.

=begin sidebar

Smart match works by calling the C<ACCEPTS> method on the operand on the right
hand side and passing it the operand on the left hand side as an argument. Thus
C<$answer ~~ 42> actually desugars to a method call like C<42.ACCEPTS($answer)>.
The upshot of this is that -- after reading the chapter on writing classes and
methods -- you too will be able to write things that can be smart-match against
just by implementing an C<ACCEPTS> method to do the right thing.

TODO: explain 'desugars' terminology

TODO: add := operator as that's used in subs-n-sigs.pod

=end sidebar

=for vim: spell
